@page "{id:guid?}"
@model HotelBookingApp.Pages.Admin.Rooms.EditModel
@{
    ViewData["Title"] = "Edit Room";
    Layout = "_Layout";
}

<div class="page-title">
    <h2>Edit Room</h2>
    <a href="/Admin/Rooms" class="btn btn-secondary">Back</a>
</div>

<div class="card p-4">
    <form id="roomForm" onsubmit="updateRoom(event)">
        <input type="hidden" id="roomId" value="@Model.RoomId" />

        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Hotel</label>
                <select id="hotelSelect" class="form-select" required></select>
            </div>

            <div class="col-md-6">
                <label class="form-label">Room Number</label>
                <input id="number" class="form-control" required />
            </div>

            <div class="col-md-6">
                <label class="form-label">Price per Night</label>
                <input id="price" type="number" class="form-control" required step="0.01" />
            </div>

            <div class="col-md-6">
                <label class="form-label">Capacity</label>
                <input id="capacity" type="number" class="form-control" required />
            </div>
        </div>

        <div class="d-flex gap-2 mt-4">
            <button id="btnUpdate" class="btn btn-primary">Update</button>
            <a href="/Admin/Rooms" class="btn btn-outline-secondary">Cancel</a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", init);

        async function init() {
          const id = document.getElementById("roomId").value;
          if (!id) { showToast("Room id is missing", "danger"); location.href="/Admin/Rooms"; return; }

          // hotels (лёгкий список из /api/hotels)
          try {
            const hotelsRes = await fetch("/api/hotels", { credentials: 'include' });
            if (!hotelsRes.ok) throw new Error("Failed to load hotels");
            const hotels = await hotelsRes.json();
            const select = document.getElementById("hotelSelect");
            select.innerHTML = hotels.map(h => `<option value="${h.id}">${h.name}</option>`).join("");
          } catch (e) { showToast(e.message || "Failed to load hotels", "danger"); return; }

          // room
          try {
            const res = await fetch(`/api/rooms/${id}`, { credentials: 'include' });
            if (!res.ok) { showToast("Room not found", "danger"); location.href="/Admin/Rooms"; return; }
            const room = await res.json();
            document.getElementById("number").value = room.number ?? '';
            document.getElementById("price").value = room.pricePerNight ?? '';
            document.getElementById("capacity").value = room.capacity ?? '';
            document.getElementById("hotelSelect").value = room.hotelId ?? '';
          } catch { showToast("Failed to load room", "danger"); }
        }

        async function updateRoom(e) {
          e.preventDefault();
          const btn = document.getElementById('btnUpdate'); btn.disabled = true;

          const id = document.getElementById("roomId").value;
          const payload = {
            id,
            number: document.getElementById("number").value.trim(),
            pricePerNight: parseFloat(document.getElementById("price").value),
            capacity: parseInt(document.getElementById("capacity").value),
            hotelId: document.getElementById("hotelSelect").value
          };

          try {
            const response = await fetch(`/api/rooms/${id}`, {
              method: "PUT",
              headers: { "Content-Type": "application/json" },
              credentials: 'include',
              body: JSON.stringify(payload)
            });

            if (response.ok) { showToast("Room updated", "success"); setTimeout(()=>location.href="/Admin/Rooms", 500); }
            else {
              const text = await response.text().catch(() => "");
              showToast("Error updating room." + (text ? ` ${text}` : ""), "danger");
            }
          } catch { showToast("Network error", "danger"); }
          finally { btn.disabled = false; }
        }
    </script>
}
